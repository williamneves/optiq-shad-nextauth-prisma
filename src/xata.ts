// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Account",
    columns: [
      {
        name: "access_token",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "expires_at",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "id_token",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "provider",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "providerAccountId",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "refresh_token",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "scope",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "session_state",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "token_type",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "type",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "userId",
        type: "link",
        link: { table: "User" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
    ],
  },
  {
    name: "Post",
    columns: [
      {
        name: "createdAt",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "createdById",
        type: "link",
        link: { table: "User" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_8fv5bcd7p10sr1lmdgmft5lelc_e0l330.\"Post_id_seq\"'::regclass)",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "updatedAt",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
    ],
  },
  {
    name: "Session",
    columns: [
      {
        name: "expires",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "sessionToken",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "userId",
        type: "link",
        link: { table: "User" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
    ],
  },
  {
    name: "User",
    columns: [
      {
        name: "email",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
      },
      {
        name: "emailVerified",
        type: "timestamp(3) without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "image",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
    ],
  },
  {
    name: "VerificationToken",
    columns: [
      {
        name: "expires",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "identifier",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "token",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Account = InferredTypes["Account"];
export type AccountRecord = Account & XataRecord;

export type Post = InferredTypes["Post"];
export type PostRecord = Post & XataRecord;

export type Session = InferredTypes["Session"];
export type SessionRecord = Session & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type VerificationToken = InferredTypes["VerificationToken"];
export type VerificationTokenRecord = VerificationToken & XataRecord;

export type DatabaseSchema = {
  Account: AccountRecord;
  Post: PostRecord;
  Session: SessionRecord;
  User: UserRecord;
  VerificationToken: VerificationTokenRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://William-Neves-s-workspace-e0l330.us-east-1.xata.sh/db/optiq-dashboad",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
